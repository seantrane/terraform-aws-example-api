openapi: 3.0.1
info:
  title: Example API
  description: This is a simple API server test.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://localhost/
- url: http://localhost/
tags:
- name: health
  description: Check the health of API.
paths:
  /health/:
    get:
      tags:
      - health
      summary: API Healthcheck
      description: Check the health of API.
      operationId: health
      responses:
        200:
          description: API is healthy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        400:
          description: Bad request.
          content: {}
        401:
          description: Access is unauthorized.
          content: {}
        403:
          description: Access is forbidden.
          content: {}
        404:
          description: Resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonApiResponse'
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/JsonApiResponse'
        500:
          description: API is not available.
          content: {}
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
          properties: {}
        timestamp:
          type: integer
          format: int32
        type:
          type: string
      example:
        code: 200
        message: Testing
        timestamp: 946684800
        type: String
    JsonApiResponse:
      type: object
      description: |-
        JSON API Response object. (http://jsonapi.org/format/)
        
        http://jsonapi.org/format/#document-top-level
        A document MUST contain at least one of the following top-level members; `data`, `meta`, `errors`.
        (The members `data` and `errors` MUST NOT coexist in the same document)
      properties:
        data:
          type: object
          description: The document's primary data.
        errors:
          type: array
          description: An array of error objects.
          items:
            $ref: '#/components/schemas/JsonApiResponseError'
        meta:
          type: object
          description: A meta object that contains non-standard meta-information.
        jsonapi:
          type: object
          description: An object describing the server's implementation.
        links:
          type: object
          properties:
            related:
              description: A related resource link when the primary data represents a resource relationship.
              oneOf:
              - type: string
              - $ref: '#/components/schemas/JsonApiResponseLink'
            self:
              description: The link that generated the current response document.
              oneOf:
              - type: string
              - $ref: '#/components/schemas/JsonApiResponseLink'
          description: A links object related to the primary data. (https://jsonapi.org/format/#document-links)
        included:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonApiResponseResourceObject'
          description: An array of resource objects that are related to the primary
            data and/or each other (included resources). If a document does not contain
            a top-level data key, the included member MUST NOT be present either.
    JsonApiResponseLink:
      type: object
      description: JSON API Response Link object. (https://jsonapi.org/format/#document-links)
      properties:
        href:
          type: string
          description: A string containing the link's URL.
        meta:
          type: object
          description: A meta object containing non-standard meta-information about
            the link.
    JsonApiResponseError:
      type: object
      description: JSON API Response Error object. (https://jsonapi.org/format/#error-objects)
      properties:
        id:
          description: A unique identifier (number|string) for this particular occurrence
            of the problem.
          oneOf:
          - type: number
          - type: string
        links:
          type: object
          properties:
            about:
              $ref: '#/components/schemas/JsonApiResponseLink'
          description: A links object containing an 'about' property; a link that
            leads to further details about this particular occurrence of the problem.
        status:
          type: string
          description: The HTTP status code applicable to this problem, expressed
            as a string value.
        code:
          type: string
          description: An application-specific error code, expressed as a string value.
        title:
          type: string
          description: A short, human-readable summary of the problem that SHOULD
            NOT change from occurrence to occurrence of the problem, except for purposes
            of localization.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of
            the problem.
        source:
          type: object
          additionalProperties:
            type: string
            description: Any additional source references.
          description: An object containing references to the source of the error.
        meta:
          type: object
          description: A meta object that contains non-standard meta-information.
    JsonApiResponseResourceObject:
      type: object
      description: |-
        JSON API Resource object. (http://jsonapi.org/format/#document-resource-objects)

        A resource object MUST contain at least the following top-level members; `id`, `type`.

        In addition, a resource object MAY contain any of these top-level members; A resource object's attributes and its relationships are collectively called its 'fields'.
        Fields for a resource object MUST share a common namespace with each other and with `type` and `id`.
        In other words, a resource can not have an attribute and relationship with the same name, nor can it have an `attribute` or `relationship` named `type` or `id`.
      properties:
        id:
          description: 'Exception: The `id` member is not required when the resource
            object originates at the client and represents a new resource to be created
            on the server.'
          oneOf:
          - type: string
          - type: number
        type:
          type: string
          description: A resource object type.
        attributes:
          type: object
          description: |-
            An `attributes` object representing some of the resource's data.
            Members of the `attributes` object represent information about the resource object in which it's defined.
            Attributes may contain any valid JSON value.
            Complex data structures involving JSON objects and arrays are allowed as attribute values. However, any object that constitutes or is contained in an attribute MUST NOT contain a relationships or links member, as those members are reserved by this specification for future use.
        relationships:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/JsonApiResponseRelationship'
          description: |-
            A `relationships` object describing relationships between the resource and other JSON API resources.
            The value of the relationships key MUST be a Relationship object.
            Members of the relationships object ("relationships") represent references from the resource object in which it’s defined to other resource objects.
            Relationships may be to-one or to-many.
        links:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - $ref: '#/components/schemas/JsonApiResponseLink'
          description: A `links` object containing links related to the resource.
        meta:
          type: object
          description: A `meta` object containing non-standard meta-information about
            a resource that can not be represented as an attribute or relationship.
    JsonApiResponseRelationship:
      type: object
      description: |-
        JSON API Relationship object. (http://jsonapi.org/format/#document-resource-object-relationships)

        A relationship object MUST contain at least one of the described properties.
      properties:
        links:
          type: object
          additionalProperties:
            oneOf:
            - type: string
            - $ref: '#/components/schemas/JsonApiResponseLink'
          description: A `links` object containing links related to the resource.
        self:
          type: object
          description: |-
            A link for the relationship itself (a "relationship link").
            This link allows the client to directly manipulate the relationship. For example, removing an author through an article’s relationship URL would disconnect the person from the article without deleting the people resource itself. When fetched successfully, this link returns the linkage for the related resources as its primary data. (See Fetching Relationships.)
        related:
          type: object
          description: A related resource link.
        data:
          type: object
          description: Resource linkage.
        meta:
          type: object
          description: A meta object that contains non-standard meta-information about
            the relationship.
